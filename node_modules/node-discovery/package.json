{
  "name": "node-discovery",
  "description": "Node discovery service with built-in support for automatic single master and capability advertising.",
  "version": "0.2.1-1",
  "author": {
    "name": "Eli Skeggs",
    "email": "skeggse@gmail.com"
  },
  "contributors": [
    {
      "name": "Dan VerWeire",
      "email": "dverweire@gmail.com"
    }
  ],
  "homepage": "http://github.com/skeggse/node-discovery",
  "repository": {
    "type": "git",
    "url": "git://github.com/skeggse/node-discovery.git"
  },
  "main": "./index.js",
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {
    "eventemitter2": "~0.4.12",
    "underscore": "~1.4.4",
    "buffer-crc32": "0.2.1"
  },
  "devDependencies": {
    "rewire": "~1.1.3",
    "sinon": "~1.7.3",
    "mocha": "~1.12.0",
    "expect.js": "~0.2.0",
    "dnode": "~1.0.5",
    "portfinder": "~0.2.1",
    "redis": "~0.8.4",
    "amqp": "~0.1.7",
    "express": "~3.2.6"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "readme": "node-discovery\n==============\n\nAutomatic and decentralized discovery and monitoring of nodejs instances with built in support for a variable number of master processes, service advertising and channel messaging.\n\nVersion 0.2.1\n\nMight have bugs. To ensure the safe performance of this module, why not contribute more [unit tests][]!?\n\nInstalling\n==========\n\n### npm\n\nUnless you have specific needs, install [`node-discovery` via npm][nd-npm].\n\n```\nnpm install node-discovery\n```\n\n### git\n\n```\ngit clone git://github.com/skeggse/node-discovery.git\n```\n\nWhy?\n====\n\nSo, you have a whole bunch of node processes running but you have no way within each process to determine where the other processes are or what they can do. This module aims to make discovery of new processes as simple as possible. Additionally, what if you want one process to be in charge of a cluster of processes? This module also has automatic master process selection.\n\nCompatibility\n=============\n\nThis module uses broadcast and multicast features from node's dgram module. Additionally, this module depends on changes to the dgram module and the new streams api introduced in 0.10. Therefore, this module is compatible with Node `v0.10.0+`.\n\nExample\n=======\n\nBe sure to look in the examples folder, especially at the [service discovery][].\n\n```js\nvar ServiceDiscovery = require('node-discovery').ServiceDiscovery;\n\nvar d = new ServiceDiscovery();\n\n// advertise the service\nd.advertise({\n  name: 'service.web',\n  ready: false\n});\n\n// inform ServiceDiscovery which services are necessary to initialize\nd.need('service.database.redis');\n\n// setup also notifies ServiceDiscovery of necessary services\nd.setup('service.database.mongo', function(service, callback) {\n  /**\n   * Initialize the service, in this example by connecting to mongo.\n   */\n});\n\nd.on('ready', function() {\n  /**\n   * ServiceDiscovery has discovered all services needed.\n   *\n   * Things to do:\n   *   Start http server listening on configured port.\n   *   Let the load balancers know we're ready for connections.\n   */\n  d.advertise({\n    name: 'service.web',\n    ready: true\n  });\n});\n\nd.on('promotion', function() {\n  /**\n   * Launch things this master process should do.\n   *\n   * For example:\n   *  - Monitior your redis servers and handle failover by issuing slaveof\n   *    commands then notify other node instances to use the new master\n   *  - Make sure there are a certain number of nodes in the cluster and\n   *    launch new ones if there are not enough\n   *  - whatever\n   */\n  console.log('I was promoted to a master.');\n});\n\nd.on('demotion', function() {\n  /**\n   * End all master specific functions or whatever you might like.\n   */\n  console.log('I was demoted from being a master.');\n});\n\nd.on('master', function(obj) {\n  /**\n   * A new master process has been selected\n   *\n   * Things we might want to do:\n   *  - Review what the new master is advertising use its services\n   *  - Kill all connections to the old master\n   */\n  console.log('A new master is in control');\n});\n```\n\nLow Level\n---------\n\nBe sure to look in the examples folder at the [distributed event emitter][].\n\n```js\nvar Discovery = require('node-discovery').Discovery;\n\nvar d = new Discovery();\n\n// advertise the process with an object\nd.advertise({\n  details: 'about',\n  this: 'service'\n});\n\nd.on('promotion', function() {\n  /**\n   * Launch things this master process should do.\n   *\n   * For example:\n   *  - Monitior your redis servers and handle failover by issuing slaveof\n   *    commands then notify other node instances to use the new master\n   *  - Make sure there are a certain number of nodes in the cluster and\n   *    launch new ones if there are not enough\n   *  - whatever\n   */\n  console.log('I was promoted to a master.');\n});\n\nd.on('demotion', function() {\n  /**\n   * End all master specific functions or whatever you might like.\n   */\n  console.log('I was demoted from being a master.');\n});\n\nd.on('added', function(obj) {\n  console.log('A new node has been added.');\n});\n\nd.on('removed', function(obj) {\n  console.log('A node has been removed.');\n});\n\nd.on('master', function(obj) {\n  /**\n   * A new master process has been selected\n   *\n   * Things we might want to do:\n   *  - Review what the new master is advertising use its services\n   *  - Kill all connections to the old master\n   */\n  console.log('A new master is in control');\n});\n```\n\nTesting\n=======\n\nAny of the following will run the tests:\n\n```\nnode-discovery$ mocha\nnode-discovery$ npm test\nnode-discovery$ make test\n```\n\nService Discovery API\n=====================\n\nConstructor\n-----------\n\n```js\nvar ServiceDiscovery = require('node-discovery');\n\nvar discovery = new ServiceDiscovery({\n  helloInterval: 1000, // How often to broadcast a hello packet in milliseconds\n  checkInterval: 2000, // How often to to check for missing nodes in milliseconds\n  nodeTimeout: 2000, // Consider a node dead if not seen in this many milliseconds\n  masterTimeout: 2000, // Consider a master node dead if not seen in this many milliseconds\n  mastersRequired: 1, // The count of master processes that should always be available\n  weight: Math.random(), // A number used to determine the preference for a specific process to become master. Higher numbers win.\n\n  address: '0.0.0.0', // Address to bind to\n  port: 12345, // Port on which to bind and communicate with other node-discovery processes\n  broadcast: '255.255.255.255', // Broadcast address if using broadcast\n  multicast: null, // Multicast address if using multicast (don't use multicast, use broadcast)\n  mulitcastTTL: 1, // Multicast TTL for when using multicast\n\n  algorithm: 'aes256', // Encryption algorithm for packet broadcasting (must have key to enable)\n  key: null, // Encryption key if your broadcast packets should be encrypted (null means no encryption)\n\n  ignore: 'self', // Which packets to ignore: 'self' means ignore packets from this instance, 'process' means ignore packets from this process\n  ignoreDataErrors: true // whether to ignore data errors including parse errors\n});\n```\n\nProperties\n----------\n\n* services\n\nMethods\n-------\n\n`ServiceDiscovery` has all the same methods as [`Discovery`](#discovery-api) and more.\n\n### advertise(info)\n\nAdvertise yourself as a service. The info `object` is mostly arbitrary, but must include a `name` property indicating the name of the service.\n\n```js\nvar ServiceDiscovery = require('node-discovery');\nvar d = new ServiceDiscovery();\n\nd.advertise({\n  name: 'service.database.mysql',\n  config: {\n    host: 'localhost',\n    port: 3306,\n    user: 'username',\n    password: 'some_awesome_password',\n    database: 'my_database_name'\n  }\n});\n```\n\n### need(service, service, service...)\n\nRequires the specified services to be present before the `ready` event is emitted.\n\n```js\nvar ServiceDiscovery = require('node-discovery');\nvar d = new ServiceDiscovery();\n\nd.need('service.database.mongo');\nd.need('service.database.redis', 'service.database.mysql');\n```\n\n### setup(service, callback)\n\nInternally calls `need(service)` and ensures the callback will be called upon discovering the specified service. If multiple are discovered, the setup hook will be called for each service. The setup hook will receive the `info` object for the service and a `callback` function to invoke upon successful or unsuccessful service setup.\n\n```js\nvar ServiceDiscovery = require('node-discovery');\nvar d = new ServiceDiscovery();\n\nvar redis;\n\nd.setup('service.database.redis', function(service, callback) {\n  redis = db.createClient(service.config.port, service.config.host);\n  if (service.config.auth)\n    redis.auth(service.config.auth, callback);\n  else\n    callback();\n});\n```\n\nEvents\n------\n\nEach event is passed the `Node Object` for which the event is occuring.\n\n### promotion\n\nTriggered when the node has been promoted to a master.\n\n* Could happen by calling the promote() method\n* Could happen by the current master instance being demoted and this instance automatically being promoted\n* Could happen by the current master instance dying and this instance automatically being promoted\n\n### demotion\n\nTriggered when the node is no longer a master.\n\n* Could happen by calling the demote() method\n* Could happen by another node promoting itself to master\n\n### master\n\nTriggered when a new master has been selected.\n\n### ready\n\nTriggered when all services have been discovered. Receives a object with keys as the names of services and values as the arrays of service objects.\n\n`services` argument:\n\n```\n{\n  \"service.database.redis\": [\n    {\n      \"name\": \"service.database.redis\",\n      \"config\": {\n        \"host\": \"localhost\",\n        \"port\": 6379\n      }\n    },\n    {\n      \"name\": \"service.database.redis\",\n      \"config\": {\n        \"host\": \"192.168.1.42\",\n        \"port\": 6379\n      }\n    }\n  ]\n}\n```\n\n### notready\n\nTriggered when a service no longer has any candidates.\n\nNode Object\n-----------\n\n```js\n{\n  isMaster: true,\n  isMasterEligible: true,\n  info: null,\n  lastSeen: 1317323922551,\n  address: '10.0.0.1',\n  port: 12345,\n  id: '31d39c91d4dfd7cdaa56738de8240bc4',\n  hostName: 'myMachine'\n}\n```\n\nDiscovery API\n=============\n\nConstructor\n-----------\n\n```js\nvar Discovery = require('node-discovery').Discovery;\n\nvar discovery = new Discovery({\n  helloInterval: 1000, // How often to broadcast a hello packet in milliseconds\n  checkInterval: 2000, // How often to to check for missing nodes in milliseconds\n  nodeTimeout: 2000, // Consider a node dead if not seen in this many milliseconds\n  masterTimeout: 2000, // Consider a master node dead if not seen in this many milliseconds\n  mastersRequired: 1, // The count of master processes that should always be available\n  weight: Math.random(), // A number used to determine the preference for a specific process to become master. Higher numbers win.\n\n  address: '0.0.0.0', // Address to bind to\n  port: 12345, // Port on which to bind and communicate with other node-discovery processes\n  broadcast: '255.255.255.255', // Broadcast address if using broadcast\n  multicast: null, // Multicast address if using multicast (don't use multicast, use broadcast)\n  mulitcastTTL: 1, // Multicast TTL for when using multicast\n\n  algorithm: 'aes256', // Encryption algorithm for packet broadcasting (must have key to enable)\n  key: null, // Encryption key if your broadcast packets should be encrypted (null means no encryption)\n\n  ignore: 'self', // Which packets to ignore: 'self' means ignore packets from this instance, 'process' means ignore packets from this process\n  ignoreDataErrors: true // whether to ignore data errors including parse errors\n});\n```\n\nProperties\n----------\n\n* nodes\n\nMethods\n-------\n\n### promote()\n\nPromote the instance to master.\n\nThis causes the old master to demote.\n\n```js\nvar Discovery = require('node-discovery').Discovery;\nvar d = new Discovery();\n\nd.promote();\n```\n\n### demote(permanent=false)\n\nDemote the instance from being a master. Optionally pass true to demote to specify that this node should not automatically become master again.\n\nThis causes another node to become master\n\n```js\nvar Discovery = require('node-discovery').Discovery;\nvar d = new Discovery();\n\n// different usages\nd.demote(); // this node is still eligible to become a master node.\nd.demote(true); // this node is no longer eligible to become a master node.\n```\n\n### join(channel, messageCallback)\n\nJoin a channel on which to receive messages/objects\n\n```js\nvar Discovery = require('node-discovery').Discovery;\nvar d = new Discovery();\n\n// pass the channel and the callback function for handling received data from that channel\nvar success = d.join('config-updates', function(data) {\n  if (data.redisMaster) {\n    // connect to the new redis master\n  }\n});\n\nif (!success) {\n  // could not join that channel; probably because it is reserved\n}\n```\n\n#### Reserved channels\n\n* promotion\n* demotion\n* added\n* removed\n* master\n* hello\n\n### leave(channel)\n\nLeave a channel\n\n```js\nvar Discovery = require('node-discovery').Discovery;\nvar d = new Discovery();\n\n// pass the channel which we want to leave\nvar success = d.leave('config-updates');\n\nif (!success) {\n  // could leave channel; who cares?\n}\n```\n\n### send(channel, objectToSend)\n\nSend a message/object on a specific channel\n\n```js\nvar Discovery = require('node-discovery').Discovery;\nvar d = new Discovery();\n\nvar success = d.send('config-updates', {redisMaster : '10.0.1.4'});\n\nif (!succes) {\n  // could not send on that channel; probably because it is reserved\n}\n```\n\n### advertise(objectToAdvertise)\n\nAdvertise an object or message with each hello packet; this is completely arbitrary. make this object/message whatever you applies to your application that you want your nodes to know about the other nodes.\n\n```js\nvar Discovery = require('node-discovery').Discovery;\nvar d = new Discovery();\n\n// any of these invocations\nd.advertise({\n  localServices : [\n    {type: 'http', port: '9911', description: 'my awesome http server'},\n    {type: 'smtp', port: '25', description: 'smtp server'}\n  ]\n});\n\nd.advertise('i love nodejs');\n\nd.advertise({something: 'something'});\n```\n\n### start()\n\nStart broadcasting hello packets and checking for missing nodes (start is called automatically in the constructor)\n\n```js\nvar Discovery = require('node-discovery').Discovery;\nvar d = new Discovery();\n\nd.start();\n```\n\n### stop()\n\nStop broadcasting hello packets and checking for missing nodes\n\n```js\nvar Discovery = require('node-discovery').Discovery;\nvar d = new Discovery();\n\nd.stop();\n```\n\nEvents\n------\n\nEach event is passed the `Node Object` for which the event is occuring.\n\n### promotion\n\nTriggered when the node has been promoted to a master.\n\n* Could happen by calling the promote() method\n* Could happen by the current master instance being demoted and this instance automatically being promoted\n* Could happen by the current master instance dying and this instance automatically being promoted\n\n### demotion\n\nTriggered when the node is no longer a master.\n\n* Could happen by calling the demote() method\n* Could happen by another node promoting itself to master\n\n### added\n\nTriggered when a new node is discovered.\n\n### removed\n\nTriggered when a new node is not heard from within `nodeTimeout`.\n\n### master\n\nTriggered when a new master has been selected.\n\nNode Object\n-----------\n\n```js\n{\n  isMaster: true,\n  isMasterEligible: true,\n  info: null,\n  lastSeen: 1317323922551,\n  address: '10.0.0.1',\n  port: 12345,\n  id: '31d39c91d4dfd7cdaa56738de8240bc4',\n  hostName: 'myMachine'\n}\n```\n\nTODO\n====\n\n* **Fix terrible hack for `rinfo`!**\n  * Currently assigning an `_info` property to the data as it flows through the stream...\n* Discovery assumes the broadcast address to be `255.255.255.255`.\n* Local address assumed to be `127.0.0.1`.\n* Missing node check may not be sufficiently optimized.\n* Address possible security concerns with EventEmitter2 and unconstrained event names.\n* Add tests for Discovery itself.\n* More documentation, both inline and API.\n* Improve service discovery node removal handling.\n* Let other services know that this service is going down if stopped.\n\n### Questions\n\n* Could the service discovery automatically call setup for one at a time?\n* Should ServiceDiscovery inherit from Discovery? Integrate into Discovery?\n\nLICENSE\n=======\n\n> (MIT License)\n\n> Copyright &copy; 2011 Dan VerWeire <dverweire@gmail.com>\n\n> Copyright &copy; 2013 Eli Skeggs <skeggse@gmail.com>\n\n> Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n> The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n[unit tests]: https://github.com/skeggse/node-discovery/blob/master/test/ \"Unit Tests\"\n[distributed event emitter]: https://github.com/skeggse/node-discovery/blob/master/examples/deventemitter/deventemitter.js \"Distributed Event Emitter\"\n[service discovery]: https://github.com/skeggse/node-discovery/blob/master/examples/service/ \"Service Discovery\"\n[nd-npm]: https://npmjs.org/package/node-discovery \"node-discovery on npm\"\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/skeggse/node-discovery/issues"
  },
  "_id": "node-discovery@0.2.1-1",
  "dist": {
    "shasum": "8a2092c6a5b8ce7474e213759802593fd8fb3681"
  },
  "_from": "node-discovery@",
  "_resolved": "https://registry.npmjs.org/node-discovery/-/node-discovery-0.2.1-1.tgz"
}
