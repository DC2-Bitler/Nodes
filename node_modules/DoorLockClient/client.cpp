#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <netdb.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <arpa/inet.h> 
#include <stdio.h>
#include <string.h>
#include <string>
#include <cstdlib>

using namespace std;

int main(int argc, char *argv[])
{
    int sockfd = 0, n = 0;
    int challange  = -1;
    int answer = 0;
    char recvBuff[9];
    char sendBuff[9];
    struct sockaddr_in serv_addr;
    char open_code[9] =  "0000OPEN";
    char close_code[9] =  "0000CLOS";
    char request_string[9];
    char challange_string[4];

    memset(challange_string, '0', sizeof(challange_string));

    if(argc != 3)
    {
        printf("\nUsage: %s <ip of server> <OPEN or CLOSE> \n",argv[0]);
        return 1;
    }

    if(strcmp(argv[2], "OPEN") == 0)
    {
        strcpy(request_string, open_code);
    }else if(strcmp(argv[2], "CLOSE") == 0){
        strcpy(request_string, close_code);
    }else{
        printf("Invalid command.\n");
        return 1;
    }

    memset(recvBuff, '0',sizeof(recvBuff));
    memset(sendBuff, '0', sizeof(sendBuff));
    if((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0)
    {
        printf("\nError : Could not create socket \n");
        return 1;
    }

    memset(&serv_addr, '0', sizeof(serv_addr));

    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(5347);

    if(inet_pton(AF_INET, argv[1], &serv_addr.sin_addr)<=0)
    {
        printf("\ninet_pton error occured\n");
        return 1;
    }

    if( connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0)
    {
        printf("\nError : Connect Failed \n");
        return 1;
    }
    else
    {
        printf("\nConnection established...\n");
    }

    send(sockfd, request_string, strlen(request_string), 0);
    printf("Sent: %s\n", request_string);

    n = recv(sockfd, recvBuff, sizeof(recvBuff)-1, 0);
    recvBuff[n] = 0;

    printf("Server sent: %s\n", recvBuff);

    if(n < 0)
    {
        printf("Read error \n");
    }
    else
    {
        for(int i = 0; i < 4; i++)
        {
            challange_string[i] = recvBuff[i];
        }
	 challange_string[4] = '\0';

        challange = atoi(challange_string);
    }

    if(challange != -1)
    {
        answer = ((challange * 7) / 4) % 9999;
        if(answer < 10) answer += 10;
        if(answer < 100) answer += 100;
        if(answer < 1000) answer += 1000;
    }

    printf("Challange number: %d\n", challange);
    printf("Answer number: %d\n", answer);

    sprintf(sendBuff, "%dRESP", answer);

    send(sockfd, sendBuff, strlen(sendBuff),0);
    return 0;
}
